/**
 * @generated VGen (for ANTLR) 1.4.0
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Program { List<Definitions> definitions; }
	public Object visit(Program node, Object param) {

		// super.visit(node, param);

		if (node.getDefinitions() != null)
			for (Definitions child : node.getDefinitions())
				child.accept(this, param);

		return null;
	}

	//	class DefinitionVariable { String name;  Type type; }
	public Object visit(DefinitionVariable node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		return null;
	}

	//	class DefinitionStruct { String name;  List<Sentence> body; }
	public Object visit(DefinitionStruct node, Object param) {

		// super.visit(node, param);

		if (node.getBody() != null)
			for (Sentence child : node.getBody())
				child.accept(this, param);

		return null;
	}

	//	class DefinitionFuncion { String name;  Type type;  List<Definitions> param;  List<Definitions> definitions;  List<Sentence> body; }
	public Object visit(DefinitionFuncion node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		if (node.getParam() != null)
			for (Definitions child : node.getParam())
				child.accept(this, param);

		if (node.getDefinitions() != null)
			for (Definitions child : node.getDefinitions())
				child.accept(this, param);

		if (node.getBody() != null)
			for (Sentence child : node.getBody())
				child.accept(this, param);

		return null;
	}

	//	class SentencePrint { Expression expr;  String accion; }
	public Object visit(SentencePrint node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class SentenceRead { Expression expression; }
	public Object visit(SentenceRead node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class SentenceAssignment { Expression left;  Expression right; }
	public Object visit(SentenceAssignment node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class SentenceIf { Expression condition;  List<Sentence> trueCon;  List<Sentence> falseCon; }
	public Object visit(SentenceIf node, Object param) {

		// super.visit(node, param);

		if (node.getCondition() != null)
			node.getCondition().accept(this, param);

		if (node.getTrueCon() != null)
			for (Sentence child : node.getTrueCon())
				child.accept(this, param);

		if (node.getFalseCon() != null)
			for (Sentence child : node.getFalseCon())
				child.accept(this, param);

		return null;
	}

	//	class SentenceWhile { Expression condition;  List<Sentence> trueCon; }
	public Object visit(SentenceWhile node, Object param) {

		// super.visit(node, param);

		if (node.getCondition() != null)
			node.getCondition().accept(this, param);

		if (node.getTrueCon() != null)
			for (Sentence child : node.getTrueCon())
				child.accept(this, param);

		return null;
	}

	//	class SentenceFunctionCall { String name;  List<Expression> param; }
	public Object visit(SentenceFunctionCall node, Object param) {

		// super.visit(node, param);

		if (node.getParam() != null)
			for (Expression child : node.getParam())
				child.accept(this, param);

		return null;
	}

	//	class SentenceReturn { Expression expression; }
	public Object visit(SentenceReturn node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class ExpressionIntCte { String value; }
	public Object visit(ExpressionIntCte node, Object param) {
		return null;
	}

	//	class ExpressionRealCte { String value; }
	public Object visit(ExpressionRealCte node, Object param) {
		return null;
	}

	//	class ExpressionCharCte { String value; }
	public Object visit(ExpressionCharCte node, Object param) {
		return null;
	}

	//	class ExpressionVariable { String value; }
	public Object visit(ExpressionVariable node, Object param) {
		return null;
	}

	//	class ExpressionArithmetic { Expression left;  String op;  Expression right; }
	public Object visit(ExpressionArithmetic node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class ExpressionComparision { Expression left;  String op;  Expression right; }
	public Object visit(ExpressionComparision node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class ExpressionOperator { Expression left;  String op;  Expression right; }
	public Object visit(ExpressionOperator node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class ExpressionNegative { Expression expression; }
	public Object visit(ExpressionNegative node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class ExpressionMinus { Expression expression; }
	public Object visit(ExpressionMinus node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class ExpressionCast { Type castTo;  Expression castFrom; }
	public Object visit(ExpressionCast node, Object param) {

		// super.visit(node, param);

		if (node.getCastTo() != null)
			node.getCastTo().accept(this, param);

		if (node.getCastFrom() != null)
			node.getCastFrom().accept(this, param);

		return null;
	}

	//	class ExpressionElements { Expression left;  String right; }
	public Object visit(ExpressionElements node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		return null;
	}

	//	class ExpressionArray { Expression left;  Expression right; }
	public Object visit(ExpressionArray node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class ExpressionFunctionCall { String name;  List<Expression> param; }
	public Object visit(ExpressionFunctionCall node, Object param) {

		// super.visit(node, param);

		if (node.getParam() != null)
			for (Expression child : node.getParam())
				child.accept(this, param);

		return null;
	}

	//	class TypeArray { List<String> dimension;  Type type; }
	public Object visit(TypeArray node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		return null;
	}

	//	class TypeStruct { String name; }
	public Object visit(TypeStruct node, Object param) {
		return null;
	}

	//	class TypeInt {  }
	public Object visit(TypeInt node, Object param) {
		return null;
	}

	//	class TypeChar {  }
	public Object visit(TypeChar node, Object param) {
		return null;
	}

	//	class TypeReal {  }
	public Object visit(TypeReal node, Object param) {
		return null;
	}
}
